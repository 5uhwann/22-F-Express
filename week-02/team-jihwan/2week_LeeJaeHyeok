# 2주차

# 모듈 소개

Express.js란?

Nodejs에 제 3자(third party) 패키지로 설치 할 수 있는 **프레임워크**

서버 제작 시 신경 쓰고 싶지 않은 세부 내용을 Skip할 수 있습니다.

*서드파티(third party)는 광의로는 **해당 분야에 관련된 상품을 출시하거나 다른 기업의 주 기술을 이용한 파생 상품 따위를 생산하는 회사**
를 가리킨다.

# Express.js 설치

```jsx
npm install --save express
// 프로덕션 의존성 때문에 npm install --save dev를 하면 안된다
// 개발중에 사용하는 것 뿐아니라 production 에서도 한 부분으로 통합될 것이므로
// 로컬, 개발, 프로덕션 모두에 설치 되어야 함

yarn add express // 위와 동
yarn add -D nodemon // 개발단에 노드몬 설치
```

설치 후 package.json 에 의존성으로 추가된 것이 보입니다.

```jsx
{
  "name": "nodejs_practice",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "devDependencies": {
    "nodemon": "^2.0.20"
  },
  "dependencies": {
    "express": "^4.18.1"
  }
}
```

## app.js에 express 불러오기

```jsx
const http = require('http');

const express = require("express");
//improt express from "express"; es6
//express 모듈을 가져옴

const app = express();
//app 상수에 express 함수를 담는다

const server = http.createServer(app);

server.listen(3000);
```

# 미들웨어 추가

미들웨어란?

요청과 응답 중간에 위치한 함수

(라우터: 특정 주소에 들어오는 것을 처리)

Request

↓

Middleware    (req, res, next) ⇒ { … }

↓next()

Middleware    (req, res, next) ⇒ { … }

↓res.send()

Response

최종적으로 미들웨어의 뜻은 Request를 express.js에 의한

다양한 함수를 통해 자동으로 이동하는 것

```jsx
app.use((req, res, next) => {});
//next는 함수로 인수에 있는 또 다른 함수를 수신하며 다음 미들웨어로 이동하게 함
//미들웨어 함수에 대한 *콜백 인수 "next"

//예시
// **next()가 있으면** 다음 미들웨어로 넘어가서 콘솔에 2가 찍힘
// 없다면 1만 찍힘

app.use((req, res, next) => {
    console.log("1")
    //next();
});

app.use((req, res, next) => {
    console.log("2");
		//res.send("html/text");
		//미들웨어에서 response를 보내면 다음 미들웨어로 진행하지 못함
});
```

**middleware?**

functions are functions that have access to the request object, the response object, and the next middleware function in the application’s request-response cycle. The next middleware function is commonly denoted by a variable named text.

**콜백?**

함수가 끝나고 난 뒤에 실행되는 함수.

자바스크립트에서 함수는 객체이다. 따라서 함수는 함수를 인자로 받고 다른 함수를 통해 return 될 수 있다. 인자로 대입되는 함수를 콜백함수라고 한다.

자바스크립트는 ‘이벤트’중심의 언어이다. 즉, 값 반환과 상관없이 다음의 이벤트를 계속 실행한다.

**콜백지옥**

비동기 처리에 콜백함수를 이용하게 되면 비동기 처리를 중첩시켜서 코드를 작성하기 때문에 에러/예외처리가 어렵고 중첩으로 인한 복잡도가 증가한다.

⇒ Promise 로 해결 : 비동기에서 성공과 실패를 분리해서 메소드를 실행한다

# Express.js 백그라운드 확인

```jsx
const server = http.createServer(app);

server.listen(3000);

app.listen(3000);
//이 코드가 위 두줄과 같은 기능
//내부적으로 위 역할을 실행함
```

# 다른 라우트 사용법

```jsx
const express = require("express");
//improt express from "express"; es6

const app = express();

app.use('/', (req, res, next) => {
    console.log("This always runs!");
    next();
});

app.use('/add-product', (req, res, next) => {
    console.log("2");
    res.send("<h1>The 'Add Product' Page</h1>")
});

app.use('/dd', (req, res, next) => {
    console.log("2");
    res.send("<h1>Hello from Express!</h1>")
});

app.listen(3000);
```

라우터의 경로가 ‘/’ 이면 다른 경로를 갈 때 해당 라우터보다 위에 있으면

모든 경로인 ‘/’ 라우터를 거쳐서 실행하게 됩니다.

# 수신 요청 분석

```jsx
const express = require("express");
const bodyParser = require("body-parser");
//improt express from "express"; es6

const app = express();

app.use(bodyParser.urlencoded({extended: false}));

app.use('/', (req, res, next) => {
    console.log("This always runs!");
    next();
});

app.use('/add-product', (req, res, next) => {
    console.log("2");
    res.send("<form action='/product' method='POST'><input type='text' name='title'><button type='submit'>Add product</button></form>")
});

app.post('/product', (req, res, next) => {
    console.log(req.body);
    res.redirect('/');
    
});

app.use('/', (req, res, next) => {
    console.log("In another middleware!");
    res.send("<h1>Hello from Express!</h1>")
});

app.listen(3000);
```

res.redirection()

//리다이렉션이란? 어떤 처리 후 사용자를 다른 페이지로 튕겨 내는 것

여기서는 console.log(”This always runs!”); 가 있는 라우터로 돌아감

body-parser(지금은 express에 기능이 추가되어 있어서 상관 없음)

```jsx
const express = require("express");
const bodyParser = require("body-parser");
//improt express from "express"; es6

const app = express();

app.use(bodyParser.urlencoded({extended: false}));
//모든 요청에서 bodyParser 미들웨어 실행, 함수를 반환
```

# POST 요청으로 미들웨어 실행 제한

```jsx
app.use 에서 use 미들웨어를 get, post로 변경시켜 제한

app.get
app.post
```

```jsx
const express = require("express");
const bodyParser = require("body-parser");
//improt express from "express"; es6

const app = express();

app.use(bodyParser.urlencoded({extended: false}));

app.use('/', (req, res, next) => {
    console.log("This always runs!");
    next();
});

app.use('/add-product', (req, res, next) => {
    console.log("2");
    res.send("<form action='/product' method='POST'><input type='text' name='title'><button type='submit'>Add product</button></form>")
});

app.post('/product', (req, res, next) => {
    console.log(req.body);
    res.redirect('/');
    
});

app.use('/', (req, res, next) => {
    console.log("In another middleware!");
    res.send("<h1>Hello from Express!</h1>")
});

app.listen(3000);
```

**주소창에 url을 입력하면 > GET 요청이 수행됨**

따라서, ‘/product’ 의 미들웨어 실행 제한이 post이므로 

해당 함수는 실행되지 않음

# Express 라우터 사용

라우터 코드를 여러 파일로 나누는 것이 좋다

라우터를 여러 파일로 내보내서 app.js 파일로 import

### 라우터 분리

```jsx
//app.js 파일

const express = require("express");

const router = express.Router();

router.get('/add-product', (req, res, next) => {
    console.log("2");
    res.send("<form action='/product' method='POST'><input type='text' name='title'><button type='submit'>Add product</button></form>")
});

router.post('/product', (req, res, next) => {
    res.send("<h1>Hello from Express!</h1>");
    
});

module.exports = router;

```

```jsx
// routes/admin.js 파일

const express = require("express");

const router = express.Router();

router.get('/add-product', (req, res, next) => {
    console.log("2");
    res.send("<form action='/product' method='POST'><input type='text' name='title'><button type='submit'>Add product</button></form>")
});

router.post('/product', (req, res, next) => {
    res.send("<h1>Hello from Express!</h1>");
    
});

module.exports = router;
```

```jsx
// routes/shop.js

const express = require("express");
const router = express.Router();

router.get('/product', (req, res, next) => {
    res.send("<h1>Hello from Express!</h1>");
    
});

module.exports = router;
```

메서드가 다르면 같은 경로 사용가능

~~위 코드는 ES5 문법으로 작성 됐으므로~~

~~비구조화 할당은 불가능~~

# 404 오류 페이지 추가

```jsx
//오류페이지로 갈 시 status(404) 상태를 404로 변경하고 page not found 출력
app.use('/', (req, res, next) => {
    res.status(404).send('<h1>Page not found</h1>');
});
```

# 경로 필터링

```jsx
//app.js 파일
.
.
//app.use(adminRoutes);를 아래와 같이 수정하면 /admin 인 라우터만으로 접근 가능
app.use('/admin', adminRoutes);

```

HTML 페이지 서비스하기

//라우터 안 메서드

res.sendFile(’경로’);   

: 파일을 보낼 수 있음

경로구축

상대경로를 ./../파일명 이런식으로 넣으면 오류 발생

path 모듈의 도움을 받아 join 메서드를 호출함으로서

생성한 경로로 파일을 보냅니다

join은 마지막에 경로를 출력합니다

그리고 여러 세그먼트를 이어 붙여 이 경로를 구축합니다.

__dirname: 절대 경로를 이 프로젝트 폴더로 고정해주는 전역 변수

첫 번째 세그먼트가 해당 프로젝트 전체의 경로가 됨

다음 세그먼트는 들어가고자 하는 폴더명

세번째 세그먼트는 파일 ex) shop.html

```jsx
router.get('/product', (req, res, next) => {
    res.sendFile(path.join(__dirname, '../', 'views', 'shop.html'));
    //__dirname이 현재 코드가 쓰인 파일을 가르키므로 routes폴더의 shop.js를 가르킴
		//그래서 ../를 추가해서 상대경로를 상위폴더로 이동하게 합니다.
});
```

path.join을 사용하는 이유: 자동으로 리눅스와 윈도우 시스템 모두에서 작동하는 방식으로 경로를 생성해주기 떄문

# 내비게이션을 위한 헬퍼 함수 사용

helper 함수의 도움을 받아 상위 디렉토리를 얻을 수 있다

알아내고자 하는 디렉토리나 파일 명만 알면 됨

```jsx
//util/path.js

const path = require('path');

//애플리케이션이 실행될 수 있도록 해주는 파일의 경로를 알려줌
module.exports = path.dirname(require.main.filename);

```

```jsx
//admin.js

const rootDir = require('../util/path');
const path = require('path');
.
.
.

router.get('/add-product', (req, res, next) => {
    res.sendFile(path.join(rootDir, 'views', 'add-product.html'));
});
```

deprecation warning

*deprecation은 이제 앞으로 라이브러리에서 지원하지 않을 것을 예고하는 말입니다.
